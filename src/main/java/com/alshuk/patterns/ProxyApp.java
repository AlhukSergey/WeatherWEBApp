package com.alshuk.patterns;

//Паттерн Прокси (Заместитель)
public interface ProxyApp {
    static void main(String[] args) {
        Car car1 = new Volvo("S40");
        System.out.println("________");
        Car car2 = new VolvoProxy("S60");
        //В данном случае разница между объектом класса Вольво и ВольвоПрокси в отложенном запуске. При создании объекта
        //car1 у объекта запуститься двигатель, хотя метод ryn()  не был вызван. В то же время у
        // объекта car2 двигатель запуститься только после вызова метода run().
    }

    //Общий интерфейс Car определяется для быстрой замены типа объекта.
    interface Car {
        void run();
    }

    class Volvo implements Car {
        String model;

        Volvo(String model) {
            this.model = model;
            startEngine();
        }

        public void startEngine() {
            System.out.println("Engine started.");
        }

        @Override
        public void run() {
            System.out.printf("The car with model %s starting to drive....", model);
        }
    }

    class VolvoProxy implements Car {
        String model;
        Volvo volvo;

        VolvoProxy(String model) {
            this.model = model;
        }

        @Override
        public void run() {
            if (volvo == null) {
                volvo = new Volvo(model);
            }
            volvo.run();
        }
    }

    //Отличительной чертой объекта и его прокси объекта является то, что оба класса реализуют один общий интерфейс,
    //а класс прокси объекта дублирует в себе код реального объекта, и при этом содержит в себе ссылку на реальный объект.
    //Таким образом, при необходимости вызвать какие-либо методы объекта бизнес-сущности, мы может добавить дополнительную
    //логику перед вызовом метода и после его вызова.

    //В данном случае реализован "виртуальный прокси". Проиходит ленивая инициализация объекта(отложенный вызов тогда,
    // когда это действительно необходимо). Используется, например, когда необходимо загрузить данные и бд или сервиса,
    // но это нет необходимости делать сразу после старта программы, а только при обращении к объекту.
    // "Логирующий прокси" - можно использовать для отслеживания обращения к сервису.
    //"Защищающий прокси" - когда в программе есть разные типы пользователей, и вам хочется защищать объект от неавторизованного доступа.
}
